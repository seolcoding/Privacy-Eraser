name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.1.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        shell: pwsh
        run: |
          if (-not (Test-Path "$HOME\.local\bin\uv.exe")) {
            iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
          }
          echo "$HOME\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\uv\cache
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\flet\bin\flutter
          key: ${{ runner.os }}-flutter-0.28.3

      - name: Install dependencies
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 1: Installing dependencies" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          uv sync --all-extras
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Dependency installation failed!"
            exit 1
          }
          Write-Host "[✓] Dependencies installed" -ForegroundColor Green

      - name: Verify build environment
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 2: Verifying environment" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          if (Test-Path "src\.venv") {
            Write-Error ".venv found in src/ directory!"
            exit 1
          }
          Write-Host "[✓] src/ directory is clean" -ForegroundColor Green
          
          Write-Host "`nCurrent directory structure:"
          Get-ChildItem -Force | Select-Object Mode, Name | Format-Table -AutoSize
          
          @("build\windows", "src\build\windows") | ForEach-Object {
            if (Test-Path $_) {
              Write-Host "Cleaning old build: $_"
              Remove-Item $_ -Recurse -Force
            }
          }
          Write-Host "[✓] Old builds cleaned" -ForegroundColor Green

      - name: Build with Flet
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 3: Building with Flet" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONIOENCODING = "utf-8"
          
          Write-Host "Current location: $(Get-Location)"
          Write-Host "Building from src/ directory...`n"
          
          Set-Location src
          Write-Host "Executing: uv run flet build windows --exclude .venv --exclude venv --exclude __pycache__ --exclude tests`n"
          
          uv run flet build windows --exclude ".venv" --exclude "venv" --exclude "__pycache__" --exclude "tests"
          
          $buildExitCode = $LASTEXITCODE
          Set-Location ..
          
          if ($buildExitCode -ne 0) {
            Write-Error "Flet build command failed with exit code: $buildExitCode"
            exit 1
          }
          
          Write-Host "`n[✓] Flet build command completed" -ForegroundColor Green

      - name: Locate and prepare build output
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 4: Locating build output" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          $possibleLocations = @(
            "build\windows",
            "src\build\windows",
            "dist\windows",
            "src\dist\windows"
          )
          
          Write-Host "`nSearching in known locations:"
          $foundLocation = $null
          
          foreach ($loc in $possibleLocations) {
            Write-Host "  Checking: $loc ... " -NoNewline
            if (Test-Path $loc) {
              Write-Host "[FOUND]" -ForegroundColor Green
              $foundLocation = $loc
              
              $itemCount = (Get-ChildItem $loc).Count
              Write-Host "    Contents: $itemCount items"
              Get-ChildItem $loc -Name | ForEach-Object { Write-Host "      - $_" }
              break
            } else {
              Write-Host "[NOT FOUND]" -ForegroundColor DarkGray
            }
          }
          
          if (-not $foundLocation) {
            Write-Host "`n[!] Not found in known locations. Searching entire directory tree..." -ForegroundColor Yellow
            
            $allWindowsDirs = Get-ChildItem -Path . -Filter "windows" -Recurse -Directory -ErrorAction SilentlyContinue | 
              Where-Object { $_.FullName -notmatch '\.venv|node_modules|\.git' }
            
            if ($allWindowsDirs) {
              Write-Host "`nFound 'windows' directories:"
              foreach ($dir in $allWindowsDirs) {
                $relPath = $dir.FullName.Replace((Get-Location).Path + "\", "")
                Write-Host "  - $relPath"
                
                $exePath = Join-Path $dir.FullName "privacy_eraser.exe"
                $dataPath = Join-Path $dir.FullName "data"
                
                if ((Test-Path $exePath) -or (Test-Path $dataPath)) {
                  Write-Host "    [!] This looks like a build output!" -ForegroundColor Yellow
                  $foundLocation = $relPath
                  break
                }
              }
            }
          }
          
          if ($foundLocation) {
            Write-Host "`n============================================" -ForegroundColor Cyan
            Write-Host "BUILD OUTPUT FOUND: $foundLocation" -ForegroundColor Green
            Write-Host "============================================" -ForegroundColor Cyan
            
            $targetLocation = "build\windows"
            
            if ($foundLocation -ne $targetLocation) {
              Write-Host "`nMoving to standard location: $targetLocation"
              
              $targetParent = Split-Path $targetLocation -Parent
              if ($targetParent -and -not (Test-Path $targetParent)) {
                New-Item -ItemType Directory -Path $targetParent -Force | Out-Null
              }
              
              if (Test-Path $targetLocation) {
                Remove-Item $targetLocation -Recurse -Force
              }
              
              Move-Item $foundLocation $targetLocation -Force
              
              if (Test-Path $targetLocation) {
                Write-Host "[✓] Successfully moved to $targetLocation" -ForegroundColor Green
              } else {
                Write-Error "Failed to move build output!"
                exit 1
              }
            } else {
              Write-Host "[✓] Build already at correct location" -ForegroundColor Green
            }
            
            if (Test-Path $targetLocation) {
              $buildSize = (Get-ChildItem $targetLocation -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
              $fileCount = (Get-ChildItem $targetLocation -Recurse -File).Count
              
              Write-Host "`nBuild statistics:"
              Write-Host "  Location: $targetLocation"
              Write-Host "  Size: $([math]::Round($buildSize, 2)) MB"
              Write-Host "  Files: $fileCount"
              
              $mainExe = Join-Path $targetLocation "privacy_eraser.exe"
              if (Test-Path $mainExe) {
                $exeSize = (Get-Item $mainExe).Length / 1MB
                Write-Host "  Main EXE: $([math]::Round($exeSize, 2)) MB"
                Write-Host "[✓] Build verification passed" -ForegroundColor Green
              } else {
                Write-Warning "privacy_eraser.exe not found in build output"
              }
            }
          } else {
            Write-Host "`n============================================" -ForegroundColor Red
            Write-Host "ERROR: Build output not found anywhere!" -ForegroundColor Red
            Write-Host "============================================" -ForegroundColor Red
            
            Write-Host "`nComplete directory structure:"
            Get-ChildItem -Recurse -Directory | Where-Object { 
              $_.FullName -notmatch '\.venv|\.git|node_modules' 
            } | Select-Object FullName | Format-Table -AutoSize
            
            exit 1
          }

      - name: Remove app.zip
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 5: Removing app.zip" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          $appZipPath = "build\windows\data\flutter_assets\app.zip"
          
          if (Test-Path $appZipPath) {
            $beforeMB = (Get-Item $appZipPath).Length / 1MB
            Write-Host "Found app.zip: $([math]::Round($beforeMB, 2)) MB"
            
            Remove-Item $appZipPath -Force
            Write-Host "[✓] Removed app.zip (saved $([math]::Round($beforeMB, 2)) MB)" -ForegroundColor Green
          } else {
            Write-Host "[i] app.zip not found (Flet 0.28+ may use unpacked packages)" -ForegroundColor Yellow
            
            $packagesPath = "build\windows\data\flutter_assets\packages"
            if (Test-Path $packagesPath) {
              $packagesMB = (Get-ChildItem $packagesPath -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
              Write-Host "    Unpacked packages: $([math]::Round($packagesMB, 2)) MB"
            }
          }
          
          $finalMB = (Get-ChildItem "build\windows" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "`n[✓] Final build size: $([math]::Round($finalMB, 2)) MB" -ForegroundColor Green

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
            $version = $matches[1]
          } elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }
          
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Version: $version" -ForegroundColor Cyan

      - name: Create distribution ZIP
        id: create_zip
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 6: Creating distribution ZIP" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "PrivacyEraser-v$version-win-x64.zip"
          
          Write-Host "Creating: $zipName"
          Compress-Archive -Path "build\windows\*" -DestinationPath $zipName -Force
          
          $hash = (Get-FileHash $zipName -Algorithm SHA256).Hash
          "$hash  $zipName" | Out-File "$zipName.sha256" -Encoding ascii
          
          $sizeMB = (Get-Item $zipName).Length / 1MB
          Write-Host "[✓] ZIP created: $([math]::Round($sizeMB, 2)) MB" -ForegroundColor Green
          Write-Host "    SHA256: $hash"
          
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_size_mb=$([math]::Round($sizeMB, 2))" >> $env:GITHUB_OUTPUT

      - name: Verify distribution size
        shell: pwsh
        run: |
          $sizeMB = ${{ steps.create_zip.outputs.zip_size_mb }}
          
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "Size validation: $sizeMB MB (max: 200 MB)" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          if ($sizeMB -gt 200) {
            Write-Error "Distribution too large! ($sizeMB MB > 200 MB)"
            exit 1
          }
          
          Write-Host "[✓] Size acceptable" -ForegroundColor Green

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PrivacyEraser-Windows-v${{ steps.version.outputs.version }}
          path: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          retention-days: 30

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        shell: pwsh
        run: |
          Write-Host "`n============================================" -ForegroundColor Green
          Write-Host "BUILD COMPLETED SUCCESSFULLY" -ForegroundColor Green
          Write-Host "============================================" -ForegroundColor Green
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Package: ${{ steps.create_zip.outputs.zip_name }}"
          Write-Host "Size: ${{ steps.create_zip.outputs.zip_size_mb }} MB"
          Write-Host "============================================`n" -ForegroundColor Green
