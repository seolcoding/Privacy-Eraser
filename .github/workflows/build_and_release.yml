name: Build and Release

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.1.0)'
        required: true
        type: string

  # Automatic trigger on tag push
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        shell: pwsh
        run: |
          iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
          echo "$HOME\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        shell: pwsh
        run: |
          uv sync --all-extras

      # CRITICAL: Verify src/ is clean (no .venv)
      - name: Verify src/ directory is clean
        shell: pwsh
        run: |
          if (Test-Path "src\.venv") {
            Write-Error ".venv found in src/! This will bloat app.zip to 1.2GB+"
            exit 1
          }
          if (Test-Path "src\venv") {
            Write-Error "venv found in src/! This will bloat app.zip to 1.2GB+"
            exit 1
          }
          Write-Host "[OK] src/ directory is clean"

      - name: Build with Flet
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        run: |
          # Set console to UTF-8 for Rich library compatibility
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONIOENCODING = "utf-8"
          
          cd src
          uv run flet build windows --exclude ".venv" --exclude "venv" --exclude "__pycache__" --exclude "tests"
          cd ..

      - name: Move build output to root
        shell: pwsh
        run: |
          if (Test-Path "src\build\windows") {
            Move-Item "src\build\windows" "build\windows" -Force
          }

      # CRITICAL: Verify app.zip size
      - name: Verify app.zip size
        shell: pwsh
        run: |
          $appZipPath = "build\windows\data\flutter_assets\app.zip"

          if (Test-Path $appZipPath) {
            $sizeMB = (Get-Item $appZipPath).Length / 1MB
            Write-Host "app.zip size: $([math]::Round($sizeMB, 2)) MB"

            if ($sizeMB -gt 100) {
              Write-Error "app.zip is too large ($([math]::Round($sizeMB, 2)) MB)! Expected: 5-20 MB"
              Write-Error "This indicates .venv or dev files were packaged"
              exit 1
            }

            Write-Host "[OK] app.zip size is acceptable"
          } else {
            Write-Host "[WARNING] app.zip not found (okay if Flet 0.27.0+ uses unpacked packages)"
          }

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
            $version = $matches[1]
          } elseif ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"

      - name: Create ZIP archive
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "PrivacyEraser-v$version-win-x64.zip"

          Compress-Archive -Path "build\windows\*" -DestinationPath $zipName -Force

          # Calculate SHA256 hash
          $hash = (Get-FileHash $zipName -Algorithm SHA256).Hash
          "$hash  $zipName" | Out-File "$zipName.sha256" -Encoding ascii

          # Show file sizes
          $zipSizeMB = (Get-Item $zipName).Length / 1MB
          Write-Host "ZIP size: $([math]::Round($zipSizeMB, 2)) MB"

          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_path=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_size_mb=$([math]::Round($zipSizeMB, 2))" >> $env:GITHUB_OUTPUT
        id: create_zip

      # CRITICAL: Verify final ZIP size is under 200MB
      - name: Verify distribution size
        shell: pwsh
        run: |
          $zipSizeMB = ${{ steps.create_zip.outputs.zip_size_mb }}

          Write-Host "============================================"
          Write-Host "DISTRIBUTION SIZE VALIDATION"
          Write-Host "============================================"
          Write-Host "Current size: $zipSizeMB MB"
          Write-Host "Maximum allowed: 200 MB"

          if ($zipSizeMB -gt 200) {
            Write-Host "============================================"
            Write-Error "Distribution ZIP is too large! ($zipSizeMB MB)"
            Write-Error "Maximum allowed: 200 MB"
            Write-Error ""
            Write-Error "This indicates build optimization failed."
            Write-Error "Check KNOWN_ISSUES.md for troubleshooting."
            Write-Error "============================================"
            exit 1
          }

          Write-Host "[OK] Distribution size is acceptable"
          Write-Host "============================================"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PrivacyEraser-Windows-v${{ steps.version.outputs.version }}
          path: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          retention-days: 30

      # Create GitHub Release (only on tag push)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        shell: pwsh
        run: |
          Write-Host "============================================"
          Write-Host "BUILD COMPLETED SUCCESSFULLY"
          Write-Host "============================================"
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Package: ${{ steps.create_zip.outputs.zip_name }}"
          Write-Host "Framework: Flet (Flutter for Python)"
          Write-Host "============================================"
