name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.1.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~\.local\bin
          key: ${{ runner.os }}-uv-0.9.5

      - name: Install UV
        shell: pwsh
        run: |
          if (-not (Test-Path "$HOME\.local\bin\uv.exe")) {
            iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
          }
          echo "$HOME\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\uv\cache
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\flet\bin\flutter
          key: ${{ runner.os }}-flutter-0.28.3

      # Run ONLY Steps 1-2 of release_flutter.bat (build only)
      - name: Build (Steps 1-2 from release_flutter.bat)
        shell: cmd
        run: |
          echo ============================================
          echo Step 1: Installing dependencies
          echo ============================================
          uv sync --all-extras
          if %errorlevel% neq 0 exit /b 1
          echo [OK] Dependencies installed
          
          echo.
          echo ============================================
          echo Step 2: Building with Flet
          echo ============================================
          
          REM Verify src/ is clean
          if exist "src\.venv" (
            echo [ERROR] .venv found in src/
            exit /b 1
          )
          echo [OK] src/ is clean
          
          REM Clean previous builds
          if exist "build\windows" rmdir /s /q "build\windows"
          if exist "src\build\windows" rmdir /s /q "src\build\windows"
          
          REM Build (same as release_flutter.bat line 133-148)
          cd src
          uv run flet build windows --exclude ".venv" --exclude "venv" --exclude "__pycache__" --exclude "tests"
          if %errorlevel% neq 0 (
            cd ..
            exit /b 1
          )
          
          REM Move build output to root
          if exist "build\windows" (
            move "build\windows" "..\build\windows" >nul
          )
          cd ..
          
          if not exist "build\windows" (
            echo [ERROR] Build failed!
            exit /b 1
          )
          echo [OK] Build successful at build\windows

      # Remove app.zip (the 1GB+ problem)
      - name: Remove app.zip (1GB+ bloat)
        shell: pwsh
        run: |
          Write-Host "============================================"
          Write-Host "Removing app.zip to reduce size"
          Write-Host "============================================"
          
          $appZip = "build\windows\data\flutter_assets\app.zip"
          
          if (Test-Path $appZip) {
            $beforeMB = (Get-Item $appZip).Length / 1MB
            Write-Host "Found app.zip: $([math]::Round($beforeMB, 2)) MB"
            
            Remove-Item $appZip -Force
            Write-Host "[OK] app.zip removed (saved $([math]::Round($beforeMB, 2)) MB)"
          } else {
            Write-Host "[INFO] app.zip not found"
          }
          
          # Show final size
          $finalMB = (Get-ChildItem "build\windows" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "[OK] Final build size: $([math]::Round($finalMB, 2)) MB"

      # Get version (same logic as release_flutter.bat)
      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
            $version = $matches[1]
          } elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Version: $version"

      # Create ZIP (Step 3 from release_flutter.bat, but WITHOUT app.zip)
      - name: Create ZIP archive
        id: create_zip
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "PrivacyEraser-v$version-win-x64.zip"
          
          Write-Host "============================================"
          Write-Host "Creating distribution ZIP"
          Write-Host "============================================"
          
          # Same as release_flutter.bat but app.zip already removed
          Compress-Archive -Path "build\windows\*" -DestinationPath $zipName -Force
          
          # Calculate SHA256 (same as release_flutter.bat)
          $hash = (Get-FileHash $zipName -Algorithm SHA256).Hash
          "$hash  $zipName" | Out-File "$zipName.sha256" -Encoding ascii
          
          # Show size
          $sizeMB = (Get-Item $zipName).Length / 1MB
          Write-Host "[OK] ZIP created: $zipName"
          Write-Host "[OK] Size: $([math]::Round($sizeMB, 2)) MB"
          
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_size_mb=$([math]::Round($sizeMB, 2))" >> $env:GITHUB_OUTPUT

      # Validate size (same as release_flutter.bat)
      - name: Verify distribution size
        shell: pwsh
        run: |
          $sizeMB = ${{ steps.create_zip.outputs.zip_size_mb }}
          
          Write-Host "============================================"
          Write-Host "Distribution size: $sizeMB MB"
          Write-Host "Maximum allowed: 200 MB"
          Write-Host "============================================"
          
          if ($sizeMB -gt 200) {
            Write-Error "Distribution too large!"
            exit 1
          }
          Write-Host "[OK] Size acceptable"

      # Upload artifacts (instead of Step 4-5 from release_flutter.bat)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PrivacyEraser-Windows-v${{ steps.version.outputs.version }}
          path: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          retention-days: 30

      # Create GitHub Release (replaces Step 4-5 from release_flutter.bat)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        shell: pwsh
        run: |
          Write-Host "============================================"
          Write-Host "RELEASE COMPLETED"
          Write-Host "============================================"
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Package: ${{ steps.create_zip.outputs.zip_name }}"
          Write-Host "Size: ${{ steps.create_zip.outputs.zip_size_mb }} MB (app.zip removed)"
          Write-Host "Build: Same as release_flutter.bat"
          Write-Host "Release: GitHub Actions"
          Write-Host "============================================"
