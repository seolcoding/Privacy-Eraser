name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.1.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        shell: pwsh
        run: |
          if (-not (Test-Path "$HOME\.local\bin\uv.exe")) {
            iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
          }
          echo "$HOME\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\uv\cache
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\flet\bin\flutter
          key: ${{ runner.os }}-flutter-0.28.3

      # STEP 1-3: Build using EXACT release_flutter.bat logic (CMD/Batch)
      - name: Build with release_flutter.bat logic
        shell: cmd
        run: |
          REM ============================================
          REM EXACT COPY of release_flutter.bat Steps 1-2
          REM ============================================
          
          REM Set UTF-8 encoding
          chcp 65001 >nul
          set PYTHONIOENCODING=utf-8
          set PYTHONUTF8=1
          
          echo ============================================
          echo STEP 1: Installing dependencies
          echo ============================================
          uv sync --all-extras
          if %errorlevel% neq 0 (
            echo [ERROR] Dependency installation failed!
            exit /b 1
          )
          echo [OK] Dependencies installed
          
          echo.
          echo ============================================
          echo STEP 2: Verifying environment
          echo ============================================
          
          REM Verify src/ is clean (same as release_flutter.bat line 106-124)
          if exist "src\.venv" (
            echo [ERROR] .venv found in src/
            exit /b 1
          )
          if exist "src\venv" (
            echo [ERROR] venv found in src/
            exit /b 1
          )
          echo [OK] src/ is clean
          
          REM Clean previous builds (same as release_flutter.bat line 96-97)
          if exist "build\windows" rmdir /s /q "build\windows"
          if exist "src\build\windows" rmdir /s /q "src\build\windows"
          echo [OK] Previous builds cleaned
          
          echo.
          echo ============================================
          echo STEP 3: Building with Flet
          echo ============================================
          
          echo Current directory:
          cd
          
          REM Build (EXACT same as release_flutter.bat line 133-141)
          cd src
          echo Building from src/ directory...
          uv run flet build windows --exclude ".venv" --exclude "venv" --exclude "__pycache__" --exclude "tests"
          
          if %errorlevel% neq 0 (
            echo [ERROR] Build failed!
            cd ..
            exit /b 1
          )
          
          REM Move build output (EXACT same as release_flutter.bat line 144-146)
          if exist "build\windows" (
            echo Moving build output to project root...
            move "build\windows" "..\build\windows" >nul
          )
          cd ..
          
          REM Verify build exists (same as release_flutter.bat line 150-155)
          if not exist "build\windows" (
            echo [ERROR] Build directory is missing!
            exit /b 1
          )
          
          echo [OK] Build successful at build\windows
          
          REM Show build contents for debugging
          echo.
          echo Build directory contents:
          dir build\windows

      # STEP 4: Locate and verify build (PowerShell for better output)
      - name: Verify build output
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 4: Verifying build output" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          if (-not (Test-Path "build\windows")) {
            Write-Error "Build directory not found!"
            
            Write-Host "`nSearching for build output..."
            Get-ChildItem -Recurse -Directory -Filter "windows" | 
              Where-Object { $_.FullName -notmatch '\.venv|\.git' } |
              ForEach-Object { Write-Host "  Found: $($_.FullName)" }
            
            exit 1
          }
          
          $buildSize = (Get-ChildItem "build\windows" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          $fileCount = (Get-ChildItem "build\windows" -Recurse -File).Count
          
          Write-Host "`nBuild statistics:"
          Write-Host "  Location: build\windows"
          Write-Host "  Size: $([math]::Round($buildSize, 2)) MB"
          Write-Host "  Files: $fileCount"
          
          if (Test-Path "build\windows\privacy_eraser.exe") {
            $exeSize = (Get-Item "build\windows\privacy_eraser.exe").Length / 1MB
            Write-Host "  Main EXE: $([math]::Round($exeSize, 2)) MB"
            Write-Host "[✓] Build verification passed" -ForegroundColor Green
          } else {
            Write-Warning "privacy_eraser.exe not found!"
            Write-Host "`nContents of build\windows:"
            Get-ChildItem "build\windows" -Name
          }

      # STEP 5: Remove app.zip
      - name: Remove app.zip
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 5: Removing app.zip" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          $appZipPath = "build\windows\data\flutter_assets\app.zip"
          
          if (Test-Path $appZipPath) {
            $beforeMB = (Get-Item $appZipPath).Length / 1MB
            Write-Host "Found app.zip: $([math]::Round($beforeMB, 2)) MB"
            
            Remove-Item $appZipPath -Force
            Write-Host "[✓] Removed app.zip (saved $([math]::Round($beforeMB, 2)) MB)" -ForegroundColor Green
          } else {
            Write-Host "[i] app.zip not found (Flet 0.28+ may use unpacked packages)" -ForegroundColor Yellow
          }
          
          $finalMB = (Get-ChildItem "build\windows" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
          Write-Host "[✓] Final build size: $([math]::Round($finalMB, 2)) MB" -ForegroundColor Green

      # STEP 6: Get version
      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
            $version = $matches[1]
          } elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }
          
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Version: $version" -ForegroundColor Cyan

      # STEP 7: Create ZIP
      - name: Create distribution ZIP
        id: create_zip
        shell: pwsh
        run: |
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "STEP 6: Creating distribution ZIP" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "PrivacyEraser-v$version-win-x64.zip"
          
          Write-Host "Creating: $zipName"
          Compress-Archive -Path "build\windows\*" -DestinationPath $zipName -Force
          
          $hash = (Get-FileHash $zipName -Algorithm SHA256).Hash
          "$hash  $zipName" | Out-File "$zipName.sha256" -Encoding ascii
          
          $sizeMB = (Get-Item $zipName).Length / 1MB
          Write-Host "[✓] ZIP created: $([math]::Round($sizeMB, 2)) MB" -ForegroundColor Green
          Write-Host "    SHA256: $hash"
          
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_size_mb=$([math]::Round($sizeMB, 2))" >> $env:GITHUB_OUTPUT

      # STEP 8: Verify size
      - name: Verify distribution size
        shell: pwsh
        run: |
          $sizeMB = ${{ steps.create_zip.outputs.zip_size_mb }}
          
          Write-Host "============================================" -ForegroundColor Cyan
          Write-Host "Size validation: $sizeMB MB (max: 200 MB)" -ForegroundColor Cyan
          Write-Host "============================================" -ForegroundColor Cyan
          
          if ($sizeMB -gt 200) {
            Write-Error "Distribution too large! ($sizeMB MB > 200 MB)"
            exit 1
          }
          
          Write-Host "[✓] Size acceptable" -ForegroundColor Green

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PrivacyEraser-Windows-v${{ steps.version.outputs.version }}
          path: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          retention-days: 30

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        shell: pwsh
        run: |
          Write-Host "`n============================================" -ForegroundColor Green
          Write-Host "BUILD COMPLETED SUCCESSFULLY" -ForegroundColor Green
          Write-Host "============================================" -ForegroundColor Green
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Package: ${{ steps.create_zip.outputs.zip_name }}"
          Write-Host "Size: ${{ steps.create_zip.outputs.zip_size_mb }} MB"
          Write-Host "Build Method: release_flutter.bat (CMD)" -ForegroundColor Yellow
          Write-Host "============================================`n" -ForegroundC
