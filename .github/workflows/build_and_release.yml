name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.1.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~\.local\bin
          key: ${{ runner.os }}-uv-0.9.5
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install UV
        shell: pwsh
        run: |
          if (-not (Test-Path "$HOME\.local\bin\uv.exe")) {
            Write-Host "Installing uv..."
            iwr https://astral.sh/uv/install.ps1 -UseBasicParsing | iex
          } else {
            Write-Host "uv already installed (from cache)"
          }
          echo "$HOME\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\uv\cache
          key: ${{ runner.os }}-uv-cache-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-cache-

      - name: Cache Flet Flutter SDK
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\flet\bin\flutter
          key: ${{ runner.os }}-flet-flutter-0.28.3
          restore-keys: |
            ${{ runner.os }}-flet-flutter-

      - name: Install dependencies
        shell: pwsh
        run: |
          uv sync --all-extras

      - name: Verify src/ directory is clean
        shell: pwsh
        run: |
          if (Test-Path "src\.venv") {
            Write-Error ".venv found in src/! This will bloat app.zip to 1.2GB+"
            exit 1
          }
          if (Test-Path "src\venv") {
            Write-Error "venv found in src/! This will bloat app.zip to 1.2GB+"
            exit 1
          }
          Write-Host "[OK] src/ directory is clean"

      - name: Build with Flet
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $env:PYTHONIOENCODING = "utf-8"

          Write-Host "Building Flet app from src/ directory..."
          uv run flet build windows src --exclude ".venv" --exclude "venv" --exclude "__pycache__" --exclude "tests"

          Write-Host ""
          Write-Host "============================================"
          Write-Host "BUILD OUTPUT LOCATION DETECTION"
          Write-Host "============================================"
          
          Write-Host "Current directory contents:"
          Get-ChildItem -Force | Select-Object Mode, Length, Name | Format-Table -AutoSize

          Write-Host ""
          Write-Host "Searching for 'windows' build directories..."
          $windowsDirs = Get-ChildItem -Path . -Filter "windows" -Recurse -Directory -ErrorAction SilentlyContinue
          if ($windowsDirs) {
            Write-Host "Found windows directories:"
            $windowsDirs | ForEach-Object { Write-Host "  - $($_.FullName)" }
          }

          $buildLocations = @(
            "build\windows",
            "src\build\windows",
            ".\build\windows",
            "dist\windows"
          )

          Write-Host ""
          Write-Host "Checking common build locations:"
          $foundLocation = $null
          foreach ($loc in $buildLocations) {
            if (Test-Path $loc) {
              Write-Host "  ✓ Found: $loc"
              $foundLocation = $loc
              Write-Host "    Contents:"
              Get-ChildItem $loc | Select-Object Name | ForEach-Object { Write-Host "      - $($_.Name)" }
            } else {
              Write-Host "  ✗ Not found: $loc"
            }
          }

          if (Test-Path "src\build\windows") {
            Write-Host ""
            Write-Host "Moving build from src\build\windows to build\windows..."
            
            if (-not (Test-Path "build")) {
              New-Item -ItemType Directory -Path "build" | Out-Null
            }
            
            if (Test-Path "build\windows") {
              Remove-Item "build\windows" -Recurse -Force
            }
            
            Move-Item "src\build\windows" "build\windows" -Force
            Write-Host "[OK] Build moved successfully"
            $foundLocation = "build\windows"
          }

          Write-Host ""
          Write-Host "============================================"
          if (Test-Path "build\windows") {
            Write-Host "[OK] Build output confirmed at: build\windows"
            
            $buildSize = (Get-ChildItem "build\windows" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
            Write-Host "Build directory size: $([math]::Round($buildSize, 2)) MB"
          } else {
            Write-Error "Build output not found at expected location!"
            Write-Host ""
            Write-Host "All directories in current path:"
            Get-ChildItem -Recurse -Directory | Select-Object FullName | Format-Table -AutoSize
            exit 1
          }
          Write-Host "============================================"

      - name: Verify app.zip size
        shell: pwsh
        run: |
          $appZipPath = "build\windows\data\flutter_assets\app.zip"

          if (Test-Path $appZipPath) {
            $sizeMB = (Get-Item $appZipPath).Length / 1MB
            Write-Host "app.zip size: $([math]::Round($sizeMB, 2)) MB"

            if ($sizeMB -gt 100) {
              Write-Error "app.zip is too large ($([math]::Round($sizeMB, 2)) MB)! Expected: 5-20 MB"
              Write-Error "This indicates .venv or dev files were packaged"
              exit 1
            }

            Write-Host "[OK] app.zip size is acceptable"
          } else {
            Write-Host "[WARNING] app.zip not found (okay if Flet 0.27.0+ uses unpacked packages)"
          }

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/v(.*)') {
            $version = $matches[1]
          } elseif ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"

      - name: Create ZIP archive
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $zipName = "PrivacyEraser-v$version-win-x64.zip"

          Compress-Archive -Path "build\windows\*" -DestinationPath $zipName -Force

          $hash = (Get-FileHash $zipName -Algorithm SHA256).Hash
          "$hash  $zipName" | Out-File "$zipName.sha256" -Encoding ascii

          $zipSizeMB = (Get-Item $zipName).Length / 1MB
          Write-Host "ZIP size: $([math]::Round($zipSizeMB, 2)) MB"

          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_path=$zipName" >> $env:GITHUB_OUTPUT
          echo "zip_size_mb=$([math]::Round($zipSizeMB, 2))" >> $env:GITHUB_OUTPUT
        id: create_zip

      - name: Verify distribution size
        shell: pwsh
        run: |
          $zipSizeMB = ${{ steps.create_zip.outputs.zip_size_mb }}

          Write-Host "============================================"
          Write-Host "DISTRIBUTION SIZE VALIDATION"
          Write-Host "============================================"
          Write-Host "Current size: $zipSizeMB MB"
          Write-Host "Maximum allowed: 200 MB"

          if ($zipSizeMB -gt 200) {
            Write-Host "============================================"
            Write-Error "Distribution ZIP is too large! ($zipSizeMB MB)"
            Write-Error "Maximum allowed: 200 MB"
            Write-Error ""
            Write-Error "This indicates build optimization failed."
            Write-Error "Check KNOWN_ISSUES.md for troubleshooting."
            Write-Host "============================================"
            exit 1
          }

          Write-Host "[OK] Distribution size is acceptable"
          Write-Host "============================================"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PrivacyEraser-Windows-v${{ steps.version.outputs.version }}
          path: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          retention-days: 30

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip
            PrivacyEraser-v${{ steps.version.outputs.version }}-win-x64.zip.sha256
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        shell: pwsh
        run: |
          Write-Host "============================================"
          Write-Host "BUILD COMPLETED SUCCESSFULLY"
          Write-Host "============================================"
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Package: ${{ steps.create_zip.outputs.zip_name }}"
          Write-Host "Framework: Flet (Flutter for Python)"
          Write-Host "Size: ${{ steps.create_zip.outputs.zip_size_mb }} MB"
          Write-Host "============================================"
